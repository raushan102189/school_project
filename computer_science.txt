Computer Science
CLASS-XI
Code No. 083
2022-23
1. Learning Outcomes
Student should be able to
a) develop basic computational thinking
b) explain and use data types
c) appreciate the notion of algorithm
d) develop a basic understanding of computer systems - architecture, operating system and cloud
computing
e) explain cyber ethics, cyber safety and cybercrime
f) Understand the value of technology in societies along with consideration of gender and disability
issues
2. Distribution of Marks
Unit
No.
Unit Name Marks Periods
Theory Practical
I Computer Systems and Organisation 10 10 10
II Computational Thinking and Programming - 1 45 80 60
III Society, Law and Ethics 15 20 ----
Total 70 110 70
3. Unit wise Syllabus
Unit I: Computer Systems and Organisation
● Basic Computer Organisation: Introduction to computer system, hardware,software, input device,
output device, CPU, memory (primary, cache and secondary), units of memory (Bit, Byte, KB, MB,
GB, TB, PB)
● Types of software: system software (operating systems, system utilities, device drivers),
programming tools and language translators (assembler, compiler & interpreter), application
software
● Operating system (OS): functions of operating system, OS user interface
● Boolean logic: NOT, AND, OR, NAND, NOR, XOR, truth table, De Morgan’s laws and logic circuits
● Number system: Binary, Octal, Decimal and Hexadecimal number system; conversion between
number systems.
● Encoding schemes: ASCII, ISCII and UNICODE (UTF8, UTF32)
Unit II: Computational Thinking and Programming – 1
● Introduction to problem solving: Steps for problem solving (analysing the problem, developing an
algorithm, coding, testing and debugging). representation of algorithms using flow chart and
pseudo code, decomposition
● Familiarization with the basics of Python programming: Introduction to Python, features of
Python, executing a simple "hello world" program, execution modes: interactive mode and script
mode, Python character set, Python tokens (keyword, identifier, literal, operator, punctuator),
variables, concept of l-value and r-value, use of comments
● Knowledge of data types: number (integer, floating point, complex), boolean, sequence (string,
list, tuple), none, mapping (dictionary), mutable and immutable data types
● Operators: arithmetic operators, relational operators, logical operators, assignment operator,
augmented assignment operators, identity operators(is, is not), membership operators(in, not in)
● Expressions, statement, type conversion & input/output: precedence of operators, expression,
evaluation of expression, python statement, type conversion (explicit & implicit conversion),
accepting data as input from the console and displaying output
● Errors: syntax errors, logical errors, runtime errors
● Flow of control: introduction, use of indentation, sequential flow, conditional and iterative flow
control
● Conditional statements: if, if-else, if-elif-else, flowcharts, simple programs: e.g.: absolute value,
sort 3 numbers and divisibility of a number
● Iterative statements: for loop, range function, while loop, flowcharts, break and continue
statements, nested loops, suggested programs: generating pattern, summation of series, finding
the factorial of a positive number etc
● Strings: introduction, indexing, string operations (concatenation, repetition, membership &
slicing), traversing a string using loops, built-in functions: len(), capitalize(), title(), lower(), upper(),
count(), find(), index(), endswith(), startswith(), isalnum(), isalpha(), isdigit(), islower(), isupper(),
isspace(), lstrip(), rstrip(), strip(), replace(), join(), partition(), split()
● Lists: introduction, indexing, list operations (concatenation, repetition, membership & slicing),
traversing a list using loops, built-in functions: len(), list(), append(), extend(), insert(), count(),
index(), remove(), pop(), reverse(), sort(), sorted(), min(), max(), sum(); nested lists, suggested
programs: finding the maximum, minimum, mean of numeric values stored in a list; linear search
on list of numbers and counting the frequency of elements in a list
● Tuples: introduction, indexing, tuple operations (concatenation, repetition, membership & slicing),
built-in functions: len(), tuple(), count(), index(), sorted(), min(), max(), sum(); tuple assignment,
nested tuple, suggested programs: finding the minimum, maximum, mean of values stored in a
tuple; linear search on a tuple of numbers, counting the frequency of elements in a tuple
● Dictionary: introduction, accessing itemsin a dictionary using keys, mutability of dictionary (adding
a new item, modifying an existing item), traversing a dictionary, built-in functions: len(), dict(),
keys(), values(), items(), get(), update(), del, clear(), fromkeys(), copy(), pop(), popitem(),
setdefault(), max(), min(), count(), sorted(), copy(); suggested programs : count the number of
times a character appears in a given string using a dictionary, create a dictionary with names of
employees, their salary and access them
● Introduction to Python modules: Importing module using 'import <module>' and using from
statement, Importing math module (pi, e,sqrt, ceil, floor, pow, fabs, sin, cos, tan); random module
(random, randint, randrange), statistics module (mean, median, mode)
Unit III: Society, Law and Ethics
● Digital Footprints
● Digital society and Netizen: net etiquettes, communication etiquettes, social media etiquettes
● Data protection: Intellectual Property Right (copyright, patent, trademark), violation of IPR
(plagiarism, copyright infringement, trademark infringement), open source softwares and
licensing (Creative Commons, GPL and Apache)
● Cyber-crime: definition, hacking, eavesdropping, phishing and fraud emails, ransomware,
preventing cyber crime
● Cyber safety: safely browsing the web, identity protection, confidentiality, cyber trolls and
bullying.
● Safely accessing web sites: malware, viruses, trojans, adware
● E-waste management: proper disposal of used electronic gadgets
● Indian Information Technology Act (IT Act)
● Technology & Society: Gender and disability issues while teaching and using computers
4. Practical
S.No. Unit Name Marks
(Total=30)
1. Lab Test (12 marks)
Python program (60% logic + 20% documentation + 20% code quality) 12
2. Report File + Viva (10 marks)
Report file: Minimum 20 Python programs 7
Viva voce 3
3. Project (that uses most of the concepts that have been learnt)
(See CS-XII for the rules regarding the projects)
8
5. Suggested Practical List
Python Programming
 Input a welcome message and display it.
 Input two numbers and display the larger / smaller number.
 Input three numbers and display the largest / smallest number.
 Generate the following patterns using nested loop.
Pattern-1 Pattern-2 Pattern-3
*
**
***
****
*****
1 2 3 4 5
1 2 3 4
1 2 3
1 2
1
A
AB
ABC
ABCD
ABCDE
 Write a program to input the value of x and n and print the sum of the following series:
o 1+x+x2+x3+x4+. ..........xn
o 1-x+x2-x3+x4 .................................xn
o x - x2 + x3 - x4 + ............xn
2 3 4 n
o x + x2- x3+ x4 ...................................xn
2! 3! 4! n!
 Determine whether a number is a perfect number, an armstrong number or a palindrome.
 Input a number and check if the number is a prime or composite number.
 Display the terms of a Fibonacci series.
 Compute the greatest common divisor and least common multiple of two integers.
 Count and display the number of vowels, consonants, uppercase, lowercase characters in string.
 Input a string and determine whether it is a palindrome or not; convert the case of characters in a
string.
 Find the largest/smallest number in a list/tuple
 Input a list of numbers and swap elements at the even location with the elements at the odd
location.
 Input a list/tuple of elements, search for a given element in the list/tuple.
 Input a list of numbers and find the smallest and largest number from the list.
 Create a dictionary with the roll number, name and marks of n students in a class and display the
names of students who have scored marks above 75.
6. Suggested Reading Material
 NCERT Textbook for COMPUTER SCIENCE (Class XI)
 Support Materials on the CBSE website.
Computer Science
CLASS-XII
Code No. 083
2022-23
1. Prerequisites
Computer Science- Class XI
2. Learning Outcomes
Student should be able to
a) apply the concept of function.
b) explain and use the concept of file handling.
c) use basic data structure: Stacks
d) explain basics of computer networks.
e) use Database concepts, SQL along with connectivity between Python and SQL.
3. Distribution of Marks:
Unit
No.
Unit Name Marks Periods
Theory Practical
I
Computational Thinking and Programming - 2 40 70 50
II Computer Networks 10 15 ---
III Database Management 20 25 20
Total 70 110 70
4. Unit wise Syllabus
Unit I: Computational Thinking and Programming – 2
 Revision of Python topics covered in Class XI.
 Functions: types of function (built-in functions, functions defined in module, user defined
functions), creating user defined function, arguments and parameters, default parameters,
positional parameters, function returning value(s), flow of execution, scope of a variable (global
scope, local scope)
 Introduction to files, types of files (Text file, Binary file, CSV file), relative and absolute paths
 Text file: opening a text file, text file open modes (r, r+, w, w+, a, a+), closing a text file, opening a
file using with clause, writing/appending data to a text file using write() and writelines(), reading
from a text file using read(), readline() and readlines(), seek and tell methods, manipulation of data
in a text file
 Binary file: basic operations on a binary file: open using file open modes (rb, rb+, wb, wb+, ab, ab+),
close a binary file, import pickle module, dump() and load() method, read, write/create, search,
append and update operations in a binary file
 CSV file: import csv module, open / close csv file, write into a csv file using csv.writer() and read
from a csv file using csv.reader( )
 Data Structure: Stack, operations on stack (push & pop), implementation of stack using list.
Unit II: Computer Networks
● Evolution of networking: introduction to computer networks, evolution of networking (ARPANET,
NSFNET, INTERNET)
● Data communication terminologies: concept of communication, components of data
communication (sender,receiver, message, communication media, protocols), measuring capacity
of communication media (bandwidth, data transfer rate), IP address, switching techniques (Circuit
switching, Packet switching)
● Transmission media: Wired communication media (Twisted pair cable, Co-axial cable, Fiber-optic
cable), Wireless media (Radio waves, Micro waves, Infrared waves)
● Network devices (Modem, Ethernet card, RJ45, Repeater, Hub, Switch, Router, Gateway, WIFI
card)
● Network topologies and Network types: types of networks (PAN, LAN, MAN, WAN), networking
topologies (Bus, Star, Tree)
● Network protocol: HTTP, FTP, PPP, SMTP, TCP/IP, POP3, HTTPS, TELNET, VoIP
● Introduction to web services: WWW, Hyper Text Markup Language (HTML), Extensible Markup
Language (XML), domain names, URL, website, web browser, web servers, web hosting
Unit III: Database Management
 Database concepts: introduction to database concepts and its need
 Relational data model: relation, attribute, tuple, domain, degree, cardinality, keys (candidate key,
primary key, alternate key, foreign key)
 Structured Query Language: introduction, Data Definition Language and Data Manipulation
Language, data type (char(n), varchar(n), int, float, date), constraints (not null, unique, primary
key), create database, use database, show databases, drop database, show tables, create table,
describe table, alter table (add and remove an attribute, add and remove primary key), drop table,
insert, delete, select, operators (mathematical, relational and logical), aliasing, distinct clause,
where clause, in, between, order by, meaning of null, is null, is not null, like, update command,
delete command, aggregate functions (max, min, avg, sum, count), group by, having clause, joins:
cartesian product on two tables, equi-join and natural join
 Interface of python with an SQL database: connecting SQL with Python, performing insert, update,
delete queries using cursor, display data by using fetchone(), fetchall(), rowcount, creating
database connectivity applications
5. Practical
S.No
.
Unit Name Marks
(Total=30)
1 Lab Test:
1. Python program (60% logic + 20% documentation +
20% code quality)
8
2. A stub program with Python SQL connectivity must
be provided with blanks (4 blanks) to be filled by the
student with the desired SQL query.
4
2 Report file:
 Minimum 15 Python programs.
 SQL Queries – Minimum 5 sets using one table /
two tables.
 Minimum 4 programs based on Python - SQL
connectivity
7
3 Project (using concepts learnt in Classes 11 and 12) 8
4 Viva voce 3
6. Suggested Practical List:
Python Programming
● Read a text file line by line and display each word separated by a #.
● Read a text file and display the number of vowels/consonants/uppercase/lowercase characters
in the file.
● Remove all the lines that contain the character 'a' in a file and write it to another file.
● Create a binary file with name and roll number. Search for a given roll number and display the
name, if not found display appropriate message.
● Create a binary file with roll number, name and marks. Input a roll number and update the marks.
● Write a random number generator that generatesrandom numbers between 1 and 6 (simulates
a dice).
● Write a Python program to implement a stack using list.
● Create a CSV file by entering user-id and password, read and search the password for given userid.
Database Management
● Create a student table and insert data. Implement the following SQL commands on the student
table:
o ALTER table to add new attributes / modify data type / drop attribute
o UPDATE table to modify data
o ORDER By to display data in ascending / descending order
o DELETE to remove tuple(s)
o GROUP BY and find the min, max, sum, count and average
● Similar exercise may be framed for other cases.
● Integrate SQL with Python by importing suitable module.
7. Suggested Reading Material
 NCERT Textbook for COMPUTER SCIENCE (Class XII)
 Support Materials on the CBSE website.
8. Project
The aim of the class project is to create something that is tangible and useful using Python file handling/
Python-SQL connectivity. This should be done in groups of two to three students and should be started
by students at least 6 months before the submission deadline. The aim here isto find a real world problem
that is worthwhile to solve.
Students are encouraged to visit local businesses and ask them about the problems that they are facing.
For example, if a business is finding it hard to create invoices for filing GST claims, then students can do
a project that takes the raw data (list of transactions), groups the transactions by category, accounts for
the GST tax rates, and creates invoices in the appropriate format. Students can be extremely creative
here. They can use a wide variety of Python libraries to create user friendly applications such as games,
software for their school, software for their disabled fellow students, and mobile applications, of course
to do some of these projects, some additional learning is required; this should be encouraged. Students
should know how to teach themselves.
The students should be sensitised to avoid plagiarism and violations of copyright issues while working on
projects. Teachers should take necessary measures for this.